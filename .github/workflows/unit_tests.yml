name: Unit Tests

defaults:
  run:
    shell: bash -le {0}

on:
  push:
  repository_dispatch:
  workflow_dispatch:

env:
  CUDA_DEVICE_ORDER: PCI_BUS_ID

concurrency:
  group: ${{ github.ref }}-workflow-unit-tests
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, macos-13, windows-latest ] # macos-latest arm64, macos-13 intel
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: 3.11
          cache: 'pip'

      - name: Ensure wmic is on PATH
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $wmic = Join-Path $env:SystemRoot 'System32\\wbem\\wmic.exe'
          if (-not (Test-Path $wmic)) {
            throw "wmic.exe not found at $wmic"
          }
          [System.IO.Path]::GetDirectoryName($wmic) | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: install
        run: pip install . pytest

      - name: test os
        run: pytest tests/test_os.py

      - name: test cpu
        if: always()
        run: pytest tests/test_cpu.py

  freebsd:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: clean dir
        run: rm -rf .git

      - name: Test in FreeBSD
        uses: vmactions/freebsd-vm@v1
        with:
          copyback: false
          prepare: |
            env ASSUME_ALWAYS_YES=yes pkg install -y python py311-pip
          run: |
            python -V
            python -m venv venv
            . venv/bin/activate
            pip install . pytest
            pytest tests/test_os.py

  solaris:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: clean dir
        run: rm -rf .git

      - name: Test in Solaris
        uses: vmactions/solaris-vm@v1
        with:
          copyback: false
          run: |
            python -V
            python -m venv venv
            source venv/bin/activate
            pip install . pytest
            pytest tests/test_os.py

  wsl:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5

      - uses: Vampire/setup-wsl@v6
        with:
          distribution: Ubuntu-24.04
          additional-packages:
            python3-pip
            python3-venv

      - name: test os
        shell: wsl-bash -u root {0}
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install . pytest
          pytest tests/test_os.py

  gpu:
    runs-on: [self-hosted, Linux]
    container:
      image: 10.0.14.248:5000/modelcloud/gptqmodel:compiler_cuda126-torch2.6.0-python313
    steps:
      - uses: actions/checkout@v5

      - name: install pciutils
        run: apt update && apt install -y pciutils

      - name: install
        run: pip install . pytest

      - name: test os
        run: pytest tests/test_os.py

      - name: Find suitable GPU
        run: |
          gpu_id=$(curl -s "http://10.0.14.248/gpu/get?id=${{ github.run_id }}&timestamp=$(date +%s%3N)&runner=${RUNNER_NAME}&force=1")
          echo "CUDA_VISIBLE_DEVICES=$gpu_id" >> $GITHUB_ENV
          echo "CUDA_VISIBLE_DEVICES=$gpu_id"

      - name: test cpu
        run: pytest tests/test_cpu.py

      - name: test gpu
        if: always() && !cancelled()
        run: pytest tests/test_gpu.py

  rocm:
    runs-on: [self-hosted, rocm]
    container:
      image: 10.0.14.248:5000/modelcloud/gptqmodel:github-ci-v6-rocm
      options: --device /dev/dri --device /dev/kfd --ipc=host
    steps:
      - uses: actions/checkout@v5

      - name: install
        run: pip install . pytest

      - name: test os
        run: pytest tests/test_os.py

      - name: test cpu
        run: pytest tests/test_cpu.py

      - name: test gpu
        if: always() && !cancelled()
        run: pytest tests/test_gpu.py

  m4:
    runs-on:  [self-hosted, m4]
    steps:
      - uses: actions/checkout@v5

      - name: Run test
        run: |
          export PATH="/opt/homebrew/bin:$PATH" && eval "$(pyenv init -)"
          pyenv global 3.11.11 && python -m venv venv
          source venv/bin/activate

          pip install wheel pytest
          
          echo "=== installing device-smi"
          pip install . --no-build-isolation
          
          echo "=== running cpu test"
          pytest tests/test_cpu.py
          
          echo "=== running gpu test"
          pytest tests/test_gpu.py
